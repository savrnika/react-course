{"ast":null,"code":"// import React from \"react\";\n// import {\n//   Box,\n//   //Icon,\n//   Button,\n//   //Fab,\n//   styled,\n//   TablePagination,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableRow,\n// } from \"@mui/material\";\n// import { SimpleCard } from \"app/components\";\n// import { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import Dialog from \"@mui/material/Dialog\";\n// import DialogActions from \"@mui/material/DialogActions\";\n// import DialogTitle from \"@mui/material/DialogTitle\";\n// import Slide from \"@mui/material/Slide\";\n// import { toast } from \"react-toastify\";\n// import { getexamList } from \"app/apis/apiMethods\";\n// const Transition = React.forwardRef(function Transition(props, ref) {\n//   return <Slide direction=\"up\" ref={ref} {...props} />;\n// });\n// const Container = styled(\"div\")(({ theme }) => ({\n//   margin: \"30px\",\n//   [theme.breakpoints.down(\"sm\")]: { margin: \"16px\" },\n//   \"& .breadcrumb\": {\n//     marginBottom: \"30px\",\n//     [theme.breakpoints.down(\"sm\")]: { marginBottom: \"16px\" },\n//   },\n// }));\n// const StyledTable = styled(Table)(({ theme }) => ({\n//   whiteSpace: \"pre\",\n//   \"& thead\": {\n//     \"& tr\": { \"& th\": { paddingLeft: 0, paddingRight: 0 } },\n//   },\n//   \"& tbody\": {\n//     \"& tr\": { \"& td\": { paddingLeft: 0, textTransform: \"capitalize\" } },\n//   },\n// }));\n// const StyledButton = styled(Button)(({ theme }) => ({\n//   margin: theme.spacing(1),\n// }));\n// export default function ExamList() {\n//   const [state, setState] = useState([]);\n//   const [page, setPage] = useState(0);\n//   const [rowsPerPage, setRowsPerPage] = useState(5);\n//   const [open, setOpen] = React.useState(false);\n//   const [userID, setUserID] = useState(\"\");\n//   function handleClickOpen(id) {\n//     setOpen(true);\n//     setUserID(id);\n//   }\n//   function handleClose() {\n//     setOpen(false);\n//   }\n//   const examList = async () => {\n//     const users = await getexamList();\n//     setState(users.data.data);\n//   };\n//   useEffect(() => {\n//     examList();\n//   }, []);\n// //   const handleDelete = async () => {\n// //     await deleteExam(userID).then((res) => {\n// //       if (res.data.status === true) {\n// //         setOpen(false);\n// //         examList();\n// //         toast.success(res.data.message);\n// //       } else {\n// //         toast.error(res.data.message);\n// //       }\n// //     });\n// //   };\n// //   const handleChangePage = (_, newPage) => {\n// //     setPage(newPage);\n// //   };\n// //   const handleChangeRowsPerPage = (event) => {\n// //     setRowsPerPage(+event.target.value);\n// //     setPage(0);\n// //   };\n//   return (\n//     <Container>\n//       <Box width=\"100%\" overflow=\"auto\">\n//         <StyledButton variant=\"contained\" color=\"primary\">\n//           {/* <Link className=\"text-light\" to={`/user/exam/${id}`}>\n//             Add Exam\n//           </Link> */}\n//         </StyledButton>\n//         <SimpleCard>\n//           <StyledTable>\n//             <TableHead>\n//               <TableRow>\n//                 <TableCell align=\"center\">id</TableCell>\n//                 <TableCell align=\"center\">Title</TableCell>\n//                 {/* <TableCell align=\"center\">Action</TableCell> */}\n//               </TableRow>\n//             </TableHead>\n//             <TableBody>\n//               {/* {state && Array.isArray(state) && state.length > 0 && state\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) */}\n//                 {/* .map((item, index) => (\n//                   <TableRow key={index}>\n//                     <TableCell align=\"center\">{index + 1}</TableCell>\n//                     <TableCell align=\"center\">{item.title}</TableCell> */}\n//                    {/* <TableCell align=\"center\">\n//                       <Fab\n//                         color=\"secondary\"\n//                         aria-label=\"Edit\"\n//                         className=\"button\"\n//                       >\n//                         {/* <Link to={`/editexam/${item._id}`}>\n//                           <Icon>edit_icon</Icon>\n//                         </Link> */}\n//                       {/* </Fab>{\" \"}\n//                       <Fab\n//                         aria-label=\"Delete\"\n//                         className=\"button\"\n//                         onClick={() => handleClickOpen(item._id)}\n//                       >\n//                         <Icon>delete</Icon>\n//                       </Fab>\n//                     </TableCell> */} \n//                   {/* </TableRow>\n//                 ))} */}\n//               <Dialog\n//                 open={open}\n//                 keepMounted\n//                 onClose={handleClose}\n//                 TransitionComponent={Transition}\n//                 aria-labelledby=\"alert-dialog-slide-title\"\n//                 aria-describedby=\"alert-dialog-slide-description\"\n//               >\n//                 <DialogTitle id=\"alert-dialog-slide-title\">\n//                   Are You Sure Want To Delete Exam ?\n//                 </DialogTitle>\n//                 <DialogActions>\n//                   <Button onClick={handleClose} color=\"primary\">\n//                     <h6>No</h6>\n//                   </Button>\n//                   {/* <Button color=\"primary\" onClick={() => handleDelete()}>\n//                     <h6 className=\"text-danger\">Yes</h6>\n//                   </Button> */}\n//                 </DialogActions>\n//               </Dialog>\n//             </TableBody>\n//           </StyledTable>\n//           {state.length <= 0 && <p>No Data Available</p>}\n//         </SimpleCard>\n//         <TablePagination\n//           sx={{ px: 2 }}\n//           page={page}\n//           component=\"div\"\n//           rowsPerPage={rowsPerPage}\n//           count={state.length}\n//           //onPageChange={handleChangePage}\n//           rowsPerPageOptions={[5, 10]}\n//          // onRowsPerPageChange={handleChangeRowsPerPage}\n//           nextIconButtonProps={{ \"aria-label\": \"Next Page\" }}\n//           backIconButtonProps={{ \"aria-label\": \"Previous Page\" }}\n//         />\n//       </Box>\n//     </Container>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/srv/swarnika_new/top_q_website/src/app/views/exams/ExamList.jsx"],"sourcesContent":["// import React from \"react\";\n// import {\n//   Box,\n//   //Icon,\n//   Button,\n//   //Fab,\n//   styled,\n//   TablePagination,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableRow,\n// } from \"@mui/material\";\n// import { SimpleCard } from \"app/components\";\n// import { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import Dialog from \"@mui/material/Dialog\";\n// import DialogActions from \"@mui/material/DialogActions\";\n// import DialogTitle from \"@mui/material/DialogTitle\";\n// import Slide from \"@mui/material/Slide\";\n// import { toast } from \"react-toastify\";\n// import { getexamList } from \"app/apis/apiMethods\";\n\n// const Transition = React.forwardRef(function Transition(props, ref) {\n//   return <Slide direction=\"up\" ref={ref} {...props} />;\n// });\n\n// const Container = styled(\"div\")(({ theme }) => ({\n//   margin: \"30px\",\n//   [theme.breakpoints.down(\"sm\")]: { margin: \"16px\" },\n//   \"& .breadcrumb\": {\n//     marginBottom: \"30px\",\n//     [theme.breakpoints.down(\"sm\")]: { marginBottom: \"16px\" },\n//   },\n// }));\n\n// const StyledTable = styled(Table)(({ theme }) => ({\n//   whiteSpace: \"pre\",\n//   \"& thead\": {\n//     \"& tr\": { \"& th\": { paddingLeft: 0, paddingRight: 0 } },\n//   },\n//   \"& tbody\": {\n//     \"& tr\": { \"& td\": { paddingLeft: 0, textTransform: \"capitalize\" } },\n//   },\n// }));\n\n// const StyledButton = styled(Button)(({ theme }) => ({\n//   margin: theme.spacing(1),\n// }));\n\n// export default function ExamList() {\n//   const [state, setState] = useState([]);\n//   const [page, setPage] = useState(0);\n//   const [rowsPerPage, setRowsPerPage] = useState(5);\n//   const [open, setOpen] = React.useState(false);\n//   const [userID, setUserID] = useState(\"\");\n\n//   function handleClickOpen(id) {\n//     setOpen(true);\n//     setUserID(id);\n//   }\n//   function handleClose() {\n//     setOpen(false);\n//   }\n\n//   const examList = async () => {\n//     const users = await getexamList();\n//     setState(users.data.data);\n//   };\n//   useEffect(() => {\n//     examList();\n//   }, []);\n\n// //   const handleDelete = async () => {\n// //     await deleteExam(userID).then((res) => {\n// //       if (res.data.status === true) {\n// //         setOpen(false);\n// //         examList();\n// //         toast.success(res.data.message);\n// //       } else {\n// //         toast.error(res.data.message);\n// //       }\n// //     });\n// //   };\n\n// //   const handleChangePage = (_, newPage) => {\n// //     setPage(newPage);\n// //   };\n\n// //   const handleChangeRowsPerPage = (event) => {\n// //     setRowsPerPage(+event.target.value);\n// //     setPage(0);\n// //   };\n//   return (\n//     <Container>\n//       <Box width=\"100%\" overflow=\"auto\">\n//         <StyledButton variant=\"contained\" color=\"primary\">\n//           {/* <Link className=\"text-light\" to={`/user/exam/${id}`}>\n//             Add Exam\n//           </Link> */}\n//         </StyledButton>\n//         <SimpleCard>\n//           <StyledTable>\n//             <TableHead>\n//               <TableRow>\n//                 <TableCell align=\"center\">id</TableCell>\n//                 <TableCell align=\"center\">Title</TableCell>\n//                 {/* <TableCell align=\"center\">Action</TableCell> */}\n//               </TableRow>\n//             </TableHead>\n//             <TableBody>\n//               {/* {state && Array.isArray(state) && state.length > 0 && state\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) */}\n//                 {/* .map((item, index) => (\n//                   <TableRow key={index}>\n//                     <TableCell align=\"center\">{index + 1}</TableCell>\n//                     <TableCell align=\"center\">{item.title}</TableCell> */}\n//                    {/* <TableCell align=\"center\">\n//                       <Fab\n//                         color=\"secondary\"\n//                         aria-label=\"Edit\"\n//                         className=\"button\"\n//                       >\n//                         {/* <Link to={`/editexam/${item._id}`}>\n//                           <Icon>edit_icon</Icon>\n//                         </Link> */}\n//                       {/* </Fab>{\" \"}\n//                       <Fab\n//                         aria-label=\"Delete\"\n//                         className=\"button\"\n//                         onClick={() => handleClickOpen(item._id)}\n//                       >\n//                         <Icon>delete</Icon>\n//                       </Fab>\n//                     </TableCell> */} \n//                   {/* </TableRow>\n//                 ))} */}\n\n//               <Dialog\n//                 open={open}\n//                 keepMounted\n//                 onClose={handleClose}\n//                 TransitionComponent={Transition}\n//                 aria-labelledby=\"alert-dialog-slide-title\"\n//                 aria-describedby=\"alert-dialog-slide-description\"\n//               >\n//                 <DialogTitle id=\"alert-dialog-slide-title\">\n//                   Are You Sure Want To Delete Exam ?\n//                 </DialogTitle>\n//                 <DialogActions>\n//                   <Button onClick={handleClose} color=\"primary\">\n//                     <h6>No</h6>\n//                   </Button>\n//                   {/* <Button color=\"primary\" onClick={() => handleDelete()}>\n//                     <h6 className=\"text-danger\">Yes</h6>\n//                   </Button> */}\n//                 </DialogActions>\n//               </Dialog>\n//             </TableBody>\n//           </StyledTable>\n\n//           {state.length <= 0 && <p>No Data Available</p>}\n\n//         </SimpleCard>\n//         <TablePagination\n//           sx={{ px: 2 }}\n//           page={page}\n//           component=\"div\"\n//           rowsPerPage={rowsPerPage}\n//           count={state.length}\n//           //onPageChange={handleChangePage}\n//           rowsPerPageOptions={[5, 10]}\n//          // onRowsPerPageChange={handleChangeRowsPerPage}\n//           nextIconButtonProps={{ \"aria-label\": \"Next Page\" }}\n//           backIconButtonProps={{ \"aria-label\": \"Previous Page\" }}\n//         />\n//       </Box>\n//     </Container>\n//   );\n// }"],"mappings},"metadata":{},"sourceType":"module"}