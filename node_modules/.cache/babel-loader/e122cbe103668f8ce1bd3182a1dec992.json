{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport React, { PureComponent } from 'react';\nimport { bind, clear } from 'size-sensor';\nimport { pick } from './helper/pick';\nimport { isFunction } from './helper/is-function';\nimport { isString } from './helper/is-string';\nimport { isEqual } from './helper/is-equal';\n/**\n * core component for echarts binding\n */\n\nvar EChartsReactCore =\n/** @class */\nfunction (_super) {\n  __extends(EChartsReactCore, _super);\n\n  function EChartsReactCore(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.echarts = props.echarts;\n    _this.ele = null;\n    _this.isInitialResize = true;\n    return _this;\n  }\n\n  EChartsReactCore.prototype.componentDidMount = function () {\n    this.renderNewEcharts();\n  }; // update\n\n\n  EChartsReactCore.prototype.componentDidUpdate = function (prevProps) {\n    /**\n     * if shouldSetOption return false, then return, not update echarts options\n     * default is true\n     */\n    var shouldSetOption = this.props.shouldSetOption;\n\n    if (isFunction(shouldSetOption) && !shouldSetOption(prevProps, this.props)) {\n      return;\n    } // 以下属性修改的时候，需要 dispose 之后再新建\n    // 1. 切换 theme 的时候\n    // 2. 修改 opts 的时候\n    // 3. 修改 onEvents 的时候，这样可以取消所有之前绑定的事件 issue #151\n\n\n    if (!isEqual(prevProps.theme, this.props.theme) || !isEqual(prevProps.opts, this.props.opts) || !isEqual(prevProps.onEvents, this.props.onEvents)) {\n      this.dispose();\n      this.renderNewEcharts(); // 重建\n\n      return;\n    } // when these props are not isEqual, update echarts\n\n\n    var pickKeys = ['option', 'notMerge', 'lazyUpdate', 'showLoading', 'loadingOption'];\n\n    if (!isEqual(pick(this.props, pickKeys), pick(prevProps, pickKeys))) {\n      this.updateEChartsOption();\n    }\n    /**\n     * when style or class name updated, change size.\n     */\n\n\n    if (!isEqual(prevProps.style, this.props.style) || !isEqual(prevProps.className, this.props.className)) {\n      this.resize();\n    }\n  };\n\n  EChartsReactCore.prototype.componentWillUnmount = function () {\n    this.dispose();\n  };\n  /**\n   * return the echart object\n   * 1. if exist, return the existed instance\n   * 2. or new one instance\n   */\n\n\n  EChartsReactCore.prototype.getEchartsInstance = function () {\n    return this.echarts.getInstanceByDom(this.ele) || this.echarts.init(this.ele, this.props.theme, this.props.opts);\n  };\n  /**\n   * dispose echarts and clear size-sensor\n   */\n\n\n  EChartsReactCore.prototype.dispose = function () {\n    if (this.ele) {\n      try {\n        clear(this.ele);\n      } catch (e) {\n        console.warn(e);\n      } // dispose echarts instance\n\n\n      this.echarts.dispose(this.ele);\n    }\n  };\n  /**\n   * render a new echarts instance\n   */\n\n\n  EChartsReactCore.prototype.renderNewEcharts = function () {\n    var _this = this;\n\n    var _a = this.props,\n        onEvents = _a.onEvents,\n        onChartReady = _a.onChartReady; // 1. new echarts instance\n\n    var echartsInstance = this.updateEChartsOption(); // 2. bind events\n\n    this.bindEvents(echartsInstance, onEvents || {}); // 3. on chart ready\n\n    if (isFunction(onChartReady)) onChartReady(echartsInstance); // 4. on resize\n\n    if (this.ele) {\n      bind(this.ele, function () {\n        _this.resize();\n      });\n    }\n  }; // bind the events\n\n\n  EChartsReactCore.prototype.bindEvents = function (instance, events) {\n    function _bindEvent(eventName, func) {\n      // ignore the event config which not satisfy\n      if (isString(eventName) && isFunction(func)) {\n        // binding event\n        instance.on(eventName, function (param) {\n          func(param, instance);\n        });\n      }\n    } // loop and bind\n\n\n    for (var eventName in events) {\n      if (Object.prototype.hasOwnProperty.call(events, eventName)) {\n        _bindEvent(eventName, events[eventName]);\n      }\n    }\n  };\n  /**\n   * render the echarts\n   */\n\n\n  EChartsReactCore.prototype.updateEChartsOption = function () {\n    var _a = this.props,\n        option = _a.option,\n        _b = _a.notMerge,\n        notMerge = _b === void 0 ? false : _b,\n        _c = _a.lazyUpdate,\n        lazyUpdate = _c === void 0 ? false : _c,\n        showLoading = _a.showLoading,\n        _d = _a.loadingOption,\n        loadingOption = _d === void 0 ? null : _d; // 1. get or initial the echarts object\n\n    var echartInstance = this.getEchartsInstance(); // 2. set the echarts option\n\n    echartInstance.setOption(option, notMerge, lazyUpdate); // 3. set loading mask\n\n    if (showLoading) echartInstance.showLoading(loadingOption);else echartInstance.hideLoading();\n    return echartInstance;\n  };\n  /**\n   * resize wrapper\n   */\n\n\n  EChartsReactCore.prototype.resize = function () {\n    // 1. get the echarts object\n    var echartsInstance = this.getEchartsInstance(); // 2. call echarts instance resize if not the initial resize\n    // resize should not happen on first render as it will cancel initial echarts animations\n\n    if (!this.isInitialResize) {\n      try {\n        echartsInstance.resize();\n      } catch (e) {\n        console.warn(e);\n      }\n    } // 3. update variable for future calls\n\n\n    this.isInitialResize = false;\n  };\n\n  EChartsReactCore.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        style = _a.style,\n        _b = _a.className,\n        className = _b === void 0 ? '' : _b; // default height = 300\n\n    var newStyle = __assign({\n      height: 300\n    }, style);\n\n    return React.createElement(\"div\", {\n      ref: function ref(e) {\n        _this.ele = e;\n      },\n      style: newStyle,\n      className: \"echarts-for-react \" + className\n    });\n  };\n\n  return EChartsReactCore;\n}(PureComponent);\n\nexport default EChartsReactCore;","map":{"version":3,"mappings":"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","names":["React","PureComponent","bind","clear","pick","isFunction","isString","isEqual","__extends","props","_super","_this","echarts","ele","isInitialResize","EChartsReactCore","renderNewEcharts","prevProps","shouldSetOption","theme","opts","onEvents","dispose","pickKeys","updateEChartsOption","style","className","resize","getInstanceByDom","init","e","console","warn","onChartReady","echartsInstance","bindEvents","instance","events","_bindEvent","eventName","func","on","param","Object","prototype","hasOwnProperty","call","option","_b","notMerge","_c","lazyUpdate","showLoading","_d","loadingOption","echartInstance","getEchartsInstance","setOption","hideLoading","newStyle","height","ref"],"sourceRoot":"","sources":["../src/core.tsx"],"sourcesContent":["import type { ECharts } from 'echarts';\nimport React, { PureComponent } from 'react';\nimport { bind, clear } from 'size-sensor';\nimport { pick } from './helper/pick';\nimport { isFunction } from './helper/is-function';\nimport { isString } from './helper/is-string';\nimport { isEqual } from './helper/is-equal';\nimport { EChartsReactProps, EChartsInstance } from './types';\n\n/**\n * core component for echarts binding\n */\nexport default class EChartsReactCore extends PureComponent<EChartsReactProps> {\n  /**\n   * echarts render container\n   */\n  public ele: HTMLElement;\n\n  /**\n   * if this is the first time we are resizing\n   */\n  private isInitialResize: boolean;\n\n  /**\n   * echarts library entry\n   */\n  protected echarts: any;\n\n  constructor(props: EChartsReactProps) {\n    super(props);\n\n    this.echarts = props.echarts;\n    this.ele = null;\n    this.isInitialResize = true;\n  }\n\n  componentDidMount() {\n    this.renderNewEcharts();\n  }\n\n  // update\n  componentDidUpdate(prevProps: EChartsReactProps) {\n    /**\n     * if shouldSetOption return false, then return, not update echarts options\n     * default is true\n     */\n    const { shouldSetOption } = this.props;\n    if (isFunction(shouldSetOption) && !shouldSetOption(prevProps, this.props)) {\n      return;\n    }\n\n    // 以下属性修改的时候，需要 dispose 之后再新建\n    // 1. 切换 theme 的时候\n    // 2. 修改 opts 的时候\n    // 3. 修改 onEvents 的时候，这样可以取消所有之前绑定的事件 issue #151\n    if (\n      !isEqual(prevProps.theme, this.props.theme) ||\n      !isEqual(prevProps.opts, this.props.opts) ||\n      !isEqual(prevProps.onEvents, this.props.onEvents)\n    ) {\n      this.dispose();\n\n      this.renderNewEcharts(); // 重建\n      return;\n    }\n\n    // when these props are not isEqual, update echarts\n    const pickKeys = ['option', 'notMerge', 'lazyUpdate', 'showLoading', 'loadingOption'];\n    if (!isEqual(pick(this.props, pickKeys), pick(prevProps, pickKeys))) {\n      this.updateEChartsOption();\n    }\n\n    /**\n     * when style or class name updated, change size.\n     */\n    if (!isEqual(prevProps.style, this.props.style) || !isEqual(prevProps.className, this.props.className)) {\n      this.resize();\n    }\n  }\n\n  componentWillUnmount() {\n    this.dispose();\n  }\n\n  /**\n   * return the echart object\n   * 1. if exist, return the existed instance\n   * 2. or new one instance\n   */\n  public getEchartsInstance(): ECharts {\n    return this.echarts.getInstanceByDom(this.ele) || this.echarts.init(this.ele, this.props.theme, this.props.opts);\n  }\n\n  /**\n   * dispose echarts and clear size-sensor\n   */\n  private dispose() {\n    if (this.ele) {\n      try {\n        clear(this.ele);\n      } catch (e) {\n        console.warn(e);\n      }\n      // dispose echarts instance\n      this.echarts.dispose(this.ele);\n    }\n  }\n\n  /**\n   * render a new echarts instance\n   */\n  private renderNewEcharts() {\n    const { onEvents, onChartReady } = this.props;\n\n    // 1. new echarts instance\n    const echartsInstance = this.updateEChartsOption();\n\n    // 2. bind events\n    this.bindEvents(echartsInstance, onEvents || {});\n\n    // 3. on chart ready\n    if (isFunction(onChartReady)) onChartReady(echartsInstance);\n\n    // 4. on resize\n    if (this.ele) {\n      bind(this.ele, () => {\n        this.resize();\n      });\n    }\n  }\n\n  // bind the events\n  private bindEvents(instance, events: EChartsReactProps['onEvents']) {\n    function _bindEvent(eventName: string, func: Function) {\n      // ignore the event config which not satisfy\n      if (isString(eventName) && isFunction(func)) {\n        // binding event\n        instance.on(eventName, (param) => {\n          func(param, instance);\n        });\n      }\n    }\n\n    // loop and bind\n    for (const eventName in events) {\n      if (Object.prototype.hasOwnProperty.call(events, eventName)) {\n        _bindEvent(eventName, events[eventName]);\n      }\n    }\n  }\n\n  /**\n   * render the echarts\n   */\n  private updateEChartsOption(): EChartsInstance {\n    const { option, notMerge = false, lazyUpdate = false, showLoading, loadingOption = null } = this.props;\n    // 1. get or initial the echarts object\n    const echartInstance = this.getEchartsInstance();\n    // 2. set the echarts option\n    echartInstance.setOption(option, notMerge, lazyUpdate);\n    // 3. set loading mask\n    if (showLoading) echartInstance.showLoading(loadingOption);\n    else echartInstance.hideLoading();\n\n    return echartInstance;\n  }\n\n  /**\n   * resize wrapper\n   */\n  private resize() {\n    // 1. get the echarts object\n    const echartsInstance = this.getEchartsInstance();\n\n    // 2. call echarts instance resize if not the initial resize\n    // resize should not happen on first render as it will cancel initial echarts animations\n    if (!this.isInitialResize) {\n      try {\n        echartsInstance.resize();\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n\n    // 3. update variable for future calls\n    this.isInitialResize = false;\n  }\n\n  render(): JSX.Element {\n    const { style, className = '' } = this.props;\n    // default height = 300\n    const newStyle = { height: 300, ...style };\n\n    return (\n      <div\n        ref={(e: HTMLElement) => {\n          this.ele = e;\n        }}\n        style={newStyle}\n        className={`echarts-for-react ${className}`}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}