{"ast":null,"code":"// import React from \"react\";\n// import { useTheme } from \"@emotion/react\";\n// import { LoadingButton } from \"@mui/lab\";\n// import { Checkbox, Grid, TextField } from \"@mui/material\";\n// import { Box, styled } from \"@mui/system\";\n// import { Paragraph } from \"app/components/Typography\";\n// import { useFormik, FormikProvider, Form } from \"formik\";\n// import { useState } from \"react\";\n// import { NavLink, useNavigate, useParams } from \"react-router-dom\";\n// import * as Yup from \"yup\";\n// import {  _patch } from \"../../apis/apiMethods\";\n// import { useEffect } from \"react\";\n// //import { Toast } from \"react-toastify/dist/components\";\n// const FlexBox = styled(Box)(() => ({ display: \"flex\", alignItems: \"center\" }));\n// const JustifyBox = styled(FlexBox)(() => ({ justifyContent: \"center\" }));\n// const ContentBox = styled(JustifyBox)(() => ({\n//   height: \"100%\",\n//   padding: \"32px\",\n//   background: \"rgba(0, 0, 0, 0.01)\",\n// }));\n// export default function EditUser() {\n//   const theme = useTheme();\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [useid, setuseId] = useState();\n//   const { id } = useParams();\n//   const validationSchema = Yup.object().shape({\n//     full_name: Yup.string()\n//       .required(\"Name is required!\"),\n//     user_name: Yup.string().required(\"Us er Name is required!\"),\n//     contact_number: Yup.string().required(\"contact_number is required\"),\n//     email: Yup.string()\n//       .email(\"Invalid Email address\")\n//       .required(\"Email is required!\"),\n//   });\n//   const initialValues = {\n//     full_name: \"\",\n//     user_name: \"\",\n//     email: \"\",\n//     contact_number: \"\",\n//     profile_image:\"\"\n//   };\n//   useEffect(async () => {\n//     const user = await EditUser(id)\n// ;\n//     //setUser(user.data);\n//     setFieldValue(`full_name`, user.data.full_name);\n//     setFieldValue(`user_name`, user.data.user_name);\n//     setFieldValue(`email`, user.data.email);\n//     setuseId(user.data._id)\n//     setFieldValue(`contact_number`, user.data.contact_number);\n//     setFieldValue(`profile_image`,user.data.profile_image);\n//     console.log(user, \"users\");\n//   }, []);\n//   const formik = useFormik({\n//     initialValues: initialValues,\n//     validationSchema: validationSchema,\n//     onSubmit: async (values) => {\n//       console.log(\"sdfsadf===\", values)\n//       let postdata = {\n//         ...values,\n//       }\n//      await _patch (useid,values).then((res)=>{\n//       setuseId(res.data)\n//       console.log(res.data,\"dta\")\n//       navigate(\"/EditProfile\");\n//     })\n//   },\n//   });\n//   const {\n//     values,\n//     errors,\n//     touched,\n//     handleSubmit,\n//     setFieldValue,\n//     getFieldProps,\n//   } = formik;\n//   /* const handleSubmit = async (id)\n//  => {\n//     const edit = await PatchUser(id)\n//     console.log(edit, \"Editdata.........\")\n//   }; */\n//   return (\n//     <div>\n//       <h1>edit users</h1>\n//       <Box width=\"100%\" overflow=\"auto\">\n//         <Grid item sm={6} xs={12}>\n//           <Box p={4} height=\"100%\">\n//           <FormikProvider value={formik}>\n//           <Form onSubmit={handleSubmit}>\n//             <TextField\n//               fullWidth\n//               size=\"small\"\n//               type=\"text\"\n//               name=\"full_name\"\n//               label=\"Username\"\n//               variant=\"outlined\"\n//               value={values.full_name}\n//               {...getFieldProps(\"full_name\")}\n//               helperText={touched.full_name && errors.full_name}\n//               error={Boolean(errors.full_name && touched.full_name)}\n//               sx={{ mb: 3 }}\n//             />\n//             <TextField\n//               fullWidth\n//               size=\"small\"\n//               type=\"text\"\n//               name=\"user_name\"\n//               label=\"User name\"\n//               variant=\"outlined\"\n//               {...getFieldProps(\"user_name\")}\n//               value={values.user_name}\n//               helperText={touched.user_name && errors.user_name}\n//               error={Boolean(errors.user_name && touched.user_name)}\n//               sx={{ mb: 3 }}\n//             />\n//             <TextField\n//               fullWidth\n//               size=\"small\"\n//               type=\"email\"\n//               name=\"email\"\n//               label=\"Email\"\n//               variant=\"outlined\"\n//               value={values.email}\n//               {...getFieldProps(\"email\")}\n//               helperText={touched.email && errors.email}\n//               error={Boolean(errors.email && touched.email)}\n//               sx={{ mb: 3 }}\n//             />\n//             <TextField\n//               fullWidth\n//               size=\"small\"\n//               name=\"contact_number\"\n//               type=\"number\"\n//               label=\"Contact number\"\n//               variant=\"outlined\"\n//               value={values.contact_number}\n//               {...getFieldProps(\"contact_number\")}\n//               helperText={touched.contact_number && errors.contact_number}\n//               error={Boolean(errors.contact_number && touched.contact_number)}\n//               sx={{ mb: 2 }}\n//             />\n//              <TextField\n//               fullWidth\n//               size=\"small\"\n//               name=\"profile_image\"\n//               type=\"number\"\n//               label=\"profile_image\"\n//               variant=\"outlined\"\n//               value={values.profile_image}\n//               {...getFieldProps(\"profile_image\")}\n//               //onChange={(e) => setImage(e.target.files[0])}\n//               helperText={touched.profile_image&& errors.profile_image}\n//               error={Boolean(errors.profile_image && touched.profile_image)}\n//               sx={{ mb: 2 }}\n//             />\n//             <LoadingButton\n//               type=\"submit\"\n//               color=\"primary\"\n//               loading={loading}\n//               variant=\"contained\"\n//               sx={{ mb: 2, mt: 3 }}\n//             >\n//               Regiser\n//             </LoadingButton>\n//             <Paragraph>\n//               Already have an account?\n//               <NavLink\n//                 to=\"/session/signin\"\n//                 style={{ color: theme.palette.primary.main, marginLeft: 5 }}\n//               >\n//                 Login\n//               </NavLink>\n//             </Paragraph>\n//           </Form>\n//           </FormikProvider>\n//           </Box>\n//         </Grid>\n//       </Box>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/srv/swarnika_new/top_q_website/src/app/views/Profile/EditUser.jsx"],"sourcesContent":["// import React from \"react\";\n// import { useTheme } from \"@emotion/react\";\n// import { LoadingButton } from \"@mui/lab\";\n// import { Checkbox, Grid, TextField } from \"@mui/material\";\n// import { Box, styled } from \"@mui/system\";\n// import { Paragraph } from \"app/components/Typography\";\n// import { useFormik, FormikProvider, Form } from \"formik\";\n// import { useState } from \"react\";\n// import { NavLink, useNavigate, useParams } from \"react-router-dom\";\n// import * as Yup from \"yup\";\n// import {  _patch } from \"../../apis/apiMethods\";\n// import { useEffect } from \"react\";\n\n\n// //import { Toast } from \"react-toastify/dist/components\";\n\n// const FlexBox = styled(Box)(() => ({ display: \"flex\", alignItems: \"center\" }));\n\n// const JustifyBox = styled(FlexBox)(() => ({ justifyContent: \"center\" }));\n\n// const ContentBox = styled(JustifyBox)(() => ({\n//   height: \"100%\",\n//   padding: \"32px\",\n//   background: \"rgba(0, 0, 0, 0.01)\",\n// }));\n\n// export default function EditUser() {\n//   const theme = useTheme();\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [useid, setuseId] = useState();\n\n//   const { id } = useParams();\n\n//   const validationSchema = Yup.object().shape({\n//     full_name: Yup.string()\n//       .required(\"Name is required!\"),\n//     user_name: Yup.string().required(\"Us er Name is required!\"),\n//     contact_number: Yup.string().required(\"contact_number is required\"),\n//     email: Yup.string()\n//       .email(\"Invalid Email address\")\n//       .required(\"Email is required!\"),\n//   });\n\n//   const initialValues = {\n//     full_name: \"\",\n//     user_name: \"\",\n//     email: \"\",\n//     contact_number: \"\",\n//     profile_image:\"\"\n//   };\n\n//   useEffect(async () => {\n//     const user = await EditUser(id)\n// ;\n//     //setUser(user.data);\n\n//     setFieldValue(`full_name`, user.data.full_name);\n//     setFieldValue(`user_name`, user.data.user_name);\n//     setFieldValue(`email`, user.data.email);\n//     setuseId(user.data._id)\n//     setFieldValue(`contact_number`, user.data.contact_number);\n//     setFieldValue(`profile_image`,user.data.profile_image);\n//     console.log(user, \"users\");\n//   }, []);\n\n//   const formik = useFormik({\n//     initialValues: initialValues,\n//     validationSchema: validationSchema,\n//     onSubmit: async (values) => {\n//       console.log(\"sdfsadf===\", values)\n//       let postdata = {\n//         ...values,\n       \n//       }\n\n//      await _patch (useid,values).then((res)=>{\n//       setuseId(res.data)\n//       console.log(res.data,\"dta\")\n//       navigate(\"/EditProfile\");\n//     })\n//   },\n//   });\n\n//   const {\n//     values,\n//     errors,\n//     touched,\n//     handleSubmit,\n//     setFieldValue,\n//     getFieldProps,\n//   } = formik;\n\n\n//   /* const handleSubmit = async (id)\n//  => {\n//     const edit = await PatchUser(id)\n\n//     console.log(edit, \"Editdata.........\")\n//   }; */\n\n//   return (\n//     <div>\n//       <h1>edit users</h1>\n\n//       <Box width=\"100%\" overflow=\"auto\">\n//         <Grid item sm={6} xs={12}>\n//           <Box p={4} height=\"100%\">\n//           <FormikProvider value={formik}>\n//           <Form onSubmit={handleSubmit}>\n//             <TextField\n//               fullWidth\n//               size=\"small\"\n//               type=\"text\"\n//               name=\"full_name\"\n//               label=\"Username\"\n//               variant=\"outlined\"\n//               value={values.full_name}\n//               {...getFieldProps(\"full_name\")}\n//               helperText={touched.full_name && errors.full_name}\n//               error={Boolean(errors.full_name && touched.full_name)}\n//               sx={{ mb: 3 }}\n//             />\n//             <TextField\n//               fullWidth\n//               size=\"small\"\n//               type=\"text\"\n//               name=\"user_name\"\n//               label=\"User name\"\n//               variant=\"outlined\"\n//               {...getFieldProps(\"user_name\")}\n//               value={values.user_name}\n//               helperText={touched.user_name && errors.user_name}\n//               error={Boolean(errors.user_name && touched.user_name)}\n//               sx={{ mb: 3 }}\n//             />\n\n//             <TextField\n//               fullWidth\n//               size=\"small\"\n//               type=\"email\"\n//               name=\"email\"\n//               label=\"Email\"\n//               variant=\"outlined\"\n//               value={values.email}\n//               {...getFieldProps(\"email\")}\n//               helperText={touched.email && errors.email}\n//               error={Boolean(errors.email && touched.email)}\n//               sx={{ mb: 3 }}\n//             />\n//             <TextField\n//               fullWidth\n//               size=\"small\"\n//               name=\"contact_number\"\n//               type=\"number\"\n//               label=\"Contact number\"\n//               variant=\"outlined\"\n//               value={values.contact_number}\n//               {...getFieldProps(\"contact_number\")}\n//               helperText={touched.contact_number && errors.contact_number}\n//               error={Boolean(errors.contact_number && touched.contact_number)}\n//               sx={{ mb: 2 }}\n//             />\n//              <TextField\n//               fullWidth\n//               size=\"small\"\n//               name=\"profile_image\"\n//               type=\"number\"\n//               label=\"profile_image\"\n//               variant=\"outlined\"\n//               value={values.profile_image}\n//               {...getFieldProps(\"profile_image\")}\n//               //onChange={(e) => setImage(e.target.files[0])}\n//               helperText={touched.profile_image&& errors.profile_image}\n//               error={Boolean(errors.profile_image && touched.profile_image)}\n//               sx={{ mb: 2 }}\n//             />\n//             <LoadingButton\n//               type=\"submit\"\n//               color=\"primary\"\n//               loading={loading}\n//               variant=\"contained\"\n//               sx={{ mb: 2, mt: 3 }}\n//             >\n//               Regiser\n//             </LoadingButton>\n\n//             <Paragraph>\n//               Already have an account?\n//               <NavLink\n//                 to=\"/session/signin\"\n//                 style={{ color: theme.palette.primary.main, marginLeft: 5 }}\n//               >\n//                 Login\n//               </NavLink>\n//             </Paragraph>\n//           </Form>\n//           </FormikProvider>\n//           </Box>\n//         </Grid>\n//       </Box>\n//     </div>\n//   );\n// }"],"mappings},"metadata":{},"sourceType":"module"}