{"ast":null,"code":"var _jsxFileName = \"/srv/swarnika_new/top_q_website/src/app/auth/AuthGuard.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport useAuth from 'app/hooks/useAuth'; // import { flat } from 'app/utils/utils';\n\nimport { Navigate, useLocation } from 'react-router-dom'; // import AllPages from '../routes';\n// const userHasPermission = (pathname, user, routes) => {\n//   if (!user) {\n//     return false;\n//   }\n//   const matched = routes.find((r) => r.path === pathname);\n//   const authenticated =\n//     matched && matched.auth && matched.auth.length ? matched.auth.includes(user.role) : true;\n//   return authenticated;\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar AuthGuard = function AuthGuard(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useAuth = useAuth(),\n      isAuthenticated = _useAuth.isAuthenticated;\n\n  var _useLocation = useLocation(),\n      pathname = _useLocation.pathname; //   const routes = flat(AllPages);\n  //   const hasPermission = userHasPermission(pathname, user, routes);\n  //   let authenticated = isAuthenticated && hasPermission;\n  // // IF YOU NEED ROLE BASED AUTHENTICATION,\n  // // UNCOMMENT ABOVE LINES\n  // // AND COMMENT OUT BELOW authenticated VARIABLE\n\n\n  var authenticated = isAuthenticated;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: authenticated ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n      replace: true,\n      to: \"/session/signin\",\n      state: {\n        from: pathname\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false);\n};\n\n_s(AuthGuard, \"RY5u2gnxxb+AKDihiNLBEUYGknU=\", false, function () {\n  return [useAuth, useLocation];\n});\n\n_c = AuthGuard;\nexport default AuthGuard;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthGuard\");","map":{"version":3,"names":["useAuth","Navigate","useLocation","AuthGuard","children","isAuthenticated","pathname","authenticated","from"],"sources":["/srv/swarnika_new/top_q_website/src/app/auth/AuthGuard.jsx"],"sourcesContent":["import useAuth from 'app/hooks/useAuth';\n// import { flat } from 'app/utils/utils';\nimport { Navigate, useLocation } from 'react-router-dom';\n// import AllPages from '../routes';\n\n// const userHasPermission = (pathname, user, routes) => {\n//   if (!user) {\n//     return false;\n//   }\n//   const matched = routes.find((r) => r.path === pathname);\n\n//   const authenticated =\n//     matched && matched.auth && matched.auth.length ? matched.auth.includes(user.role) : true;\n//   return authenticated;\n// };\n\nconst AuthGuard = ({ children }) => {\n  let {\n    isAuthenticated,\n    // user\n  } = useAuth();\n  const { pathname } = useLocation();\n\n  //   const routes = flat(AllPages);\n\n  //   const hasPermission = userHasPermission(pathname, user, routes);\n  //   let authenticated = isAuthenticated && hasPermission;\n\n  // // IF YOU NEED ROLE BASED AUTHENTICATION,\n  // // UNCOMMENT ABOVE LINES\n  // // AND COMMENT OUT BELOW authenticated VARIABLE\n\n  let authenticated = isAuthenticated;\n\n  return (\n    <>\n      {authenticated ? (\n        children\n      ) : (\n        <Navigate replace to=\"/session/signin\" state={{ from: pathname }} />\n      )}\n    </>\n  );\n};\n\nexport default AuthGuard;\n"],"mappings":";;;;AAAA,OAAOA,OAAP,MAAoB,mBAApB,C,CACA;;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC,C,CACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAkB;EAAA;;EAAA,IAAfC,QAAe,QAAfA,QAAe;;EAClC,eAGIJ,OAAO,EAHX;EAAA,IACEK,eADF,YACEA,eADF;;EAIA,mBAAqBH,WAAW,EAAhC;EAAA,IAAQI,QAAR,gBAAQA,QAAR,CALkC,CAOlC;EAEA;EACA;EAEA;EACA;EACA;;;EAEA,IAAIC,aAAa,GAAGF,eAApB;EAEA,oBACE;IAAA,UACGE,aAAa,GACZH,QADY,gBAGZ,QAAC,QAAD;MAAU,OAAO,MAAjB;MAAkB,EAAE,EAAC,iBAArB;MAAuC,KAAK,EAAE;QAAEI,IAAI,EAAEF;MAAR;IAA9C;MAAA;MAAA;MAAA;IAAA;EAJJ,iBADF;AASD,CA3BD;;GAAMH,S;UAIAH,O,EACiBE,W;;;KALjBC,S;AA6BN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}